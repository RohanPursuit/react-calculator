{"version":3,"sources":["components/Digits.js","components/Operators.js","components/Numpad.js","components/operation.js","components/reduceProd.js","components/reduceSum.js","components/reduceParens.js","components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["digits","split","map","el","className","value","Operators","i","name","test","Numpad","onClick","this","props","click","Component","operation","str","console","log","Number","match","first","sign","second","reduceProd","expression","replace","args","p1","reduceSum","reduceParens","Result","getResult","join","isOpen","length","toLocaleString","App","onButtonClick","event","target","state","bool","integer","isZero","isParenComplete","setState","result","isEqual","slice","push","handleIsEqual","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6221c3c3.chunk.js","sourcesContent":["export default function digits() {\n    const numbers = '7894561230.'\n    const arr = numbers.split('').map(el => <button className={'num'+el} key={el} value={el}>{el}</button>)\n    return arr\n}","export default function Operators() {\n    const operators = '%C()+-/*'\n    const arr = operators.split('').map((el, i) => <button className={\"oper-\"+i} key={i} value={el} name={(/\\//.test(el) && \"÷\")|| \n    (/\\*/.test(el) && \"×\")|| el}>{(/\\//.test(el) && \"÷\")|| \n    (/\\*/.test(el) && \"×\")|| el}</button>)\n    return arr\n}","import { Component } from 'react'\nimport './Numpad.css'\nimport Digits from './Digits'\nimport Operators from './Operators'\n\n\nexport default class Numpad extends Component {\n     \n    render(){\n        return (\n            <div className=\"numbers-operators\">\n                <section className='numbers' onClick={this.props.click}>\n                   <Digits/> \n                </section>\n                <section className=\"operators\" onClick={this.props.click}>\n                   <Operators/> \n                </section>\n                <section className=\"ac\" onClick={this.props.click}>\n                    <button value=\"AC\" className=\"clear\">AC</button>\n                    <button className=\"negative\" value=\"±\">±</button>\n                    <button value='=' className='equal'>=</button> \n                </section>\n                \n            </div>\n        )\n    }\n}\n","const operation = (str) =>{\n    console.log(str)\n    if(Number(str)) return 1*str\n    const [ ,first ,sign, second ] = str.match(/(-?\\d+?\\.?\\d+|-?\\d+?\\.|-?\\d+)(\\+|-|×|÷)(.+)/)\n    console.log(first)\n    console.log(sign)\n    console.log(second)\n    // const [first=0, second=0] = str.split(sign)\n    switch(sign){\n        case '+':\n            return 1*first + 1*second\n        case '-':\n            return 1*first - 1*second\n        case '×':\n            return first * second\n        case '÷':\n            return first / second\n        default:\n            break;\n       \n    }\n}\n\nexport default operation","import operation from './operation'\n\nconst reduceProd = (expression) => {\n    expression = expression.replace(/(-?\\d+?\\.+?\\d+[×÷].?\\d+?\\.+\\d+|-?\\d+?\\.+?\\d+[×÷].?\\d+|-?\\d+[×÷].?\\d+?\\.+?\\d+|-?\\d+[×÷].?\\d+)/, (...args) => {\n        const [,p1] = args\n        return operation(p1)\n    })\n    return expression\n}\n\nexport default reduceProd","import operation from './operation'\n\nconst reduceSum = (expression) => {\n    expression = expression.replace(/(-?\\d+?\\.+?\\d+[+-].?\\d+?\\.+\\d+|-?\\d+?\\.+?\\d+[+-].?\\d+|-?\\d+[+-].?\\d+?\\.+?\\d+|-?\\d+[+-].?\\d+)/, (...args) => {\n        const [,p1] = args\n        console.log(p1)\n        return operation(p1)\n    })\n    console.log(expression)\n    return expression\n}\n\nexport default reduceSum","import reduceProd from './reduceProd'\nimport reduceSum from './reduceSum'\nimport operation from './operation'\n\nconst reduceParens = (expression) => {\n    expression = expression.replace(/(\\()(?!.*\\1)(.*?)\\)/, (...args) => {\n        let [,,p1] = args\n        while(/[×÷]/.test(p1)){\n            p1 = reduceProd(p1)\n        }\n        if(Number(p1)) return 1*p1\n        while(/[+-]/.test(p1)){\n            if(Number(p1)) return 1*p1\n            p1 = reduceSum(p1)\n        }\n\n        return operation(p1)\n    })\n    return expression\n}\n\nexport default reduceParens","import {Component} from 'react'\nimport '../App.css';\nimport reduceParens from './reduceParens';\nimport reduceProd from './reduceProd'\nimport reduceSum from './reduceSum'\n\nexport default class Result extends Component {\n\n    getResult = (expression) => {\n        expression = expression.split(\" \").join('')\n        if(this.props.isOpen > 0 || /[^\\d|)]/.test(expression[expression.length-1])){\n            return 0\n        }\n\n        while(/\\(/.test(expression)){\n            expression = expression.replace(/\\+\\+|--/g, '+')\n            expression = reduceParens(expression)\n        }\n    \n        // expression = expression.replace(/\\)/g, '')\n        \n        if(Number(expression)) return Number(expression).toLocaleString(\"en-US\")\n        \n        while(/[×÷]/.test(expression)){\n            expression = expression.replace(/\\+\\+|--/g, '+')\n            expression = reduceProd(expression)\n        }\n        \n        if(Number(expression)) return Number(expression).toLocaleString(\"en-US\")\n    \n        while(/[+-]/.test(expression)){\n            expression = expression.replace(/\\+\\+|--/g, '+')\n            expression = reduceSum(expression)\n            if(Number(expression)) return Number(expression).toLocaleString(\"en-US\")\n        }\n\n    \n        return Number(expression).toLocaleString(\"en-US\")\n    }\n\n    render() {\n        return this.getResult(this.props.expression.join(''))\n    }\n}","import { Component } from 'react';\nimport './App.css';\nimport Numpad from './components/Numpad';\nimport Result from './components/Result'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      integer: '',\n      bool: false,\n      expression: [''],\n      result: '',\n      isEqual: [''],\n      isOpen: 0,\n    }\n  }\n  onButtonClick = (event) => {\n    const value = event.target.value\n    const {expression, bool, integer} = this.state\n    let {isOpen} = this.state\n\n    const isZero = Number(integer) === 0 && Number(value) === 0\n\n    let isParenComplete = true\n\n    if(/\\(/.test(expression)){\n      isParenComplete = /(\\()(?!.*\\1)(.*?)\\)/.test(expression.join(''))\n      this.setState({result: <Result expression={this.state.expression} isParenComplete={isParenComplete} isOpen={isOpen}/>})\n    }\n    \n    if(value === 'AC'){\n        this.setState({\n        integer: '',\n        expression: [''],\n        bool: false,\n        result: '',\n        isEqual: [''],\n        isOpen: 0,\n      })\n    } else if (value === \"=\"){\n      this.setState({result: <Result expression={this.state.expression} isParenComplete={isParenComplete} isOpen={isOpen}/>, isEqual: [],})\n    } else if (value === \"C\"){\n      expression[expression.length-1] = \"\"\n      this.setState({integer: ''})\n    } else {\n      if(/±/.test(value)  && /-/.test(integer[0])){\n        expression[expression.length-1] = expression[expression.length-1].slice(1)\n        this.setState({integer: integer.slice(1), result: <Result expression={this.state.expression} isParenComplete={isParenComplete} isOpen={isOpen}/>})\n      } else if (/±/.test(value)  && !(/-/.test(integer[0]))){\n        expression[expression.length-1] = '-' + expression[expression.length-1]\n        this.setState({integer: '-' + integer, result: <Result expression={this.state.expression} isParenComplete={isParenComplete} isOpen={isOpen}/>})\n      }\n\n      if(bool && /\\d|\\./.test(value)){\n        expression[expression.length-1] = value\n        this.setState({integer: value, bool: false, result: <Result expression={this.state.expression} isParenComplete={isParenComplete} isOpen={isOpen}/>})\n      }\n      else if(/\\d|\\./.test(value) && !isZero){\n        expression[expression.length-1] = this.state.integer + value\n        this.setState({integer: this.state.integer + value, result: <Result expression={this.state.expression} isParenComplete={isParenComplete} isOpen={isOpen}/>})\n      } else if (/\\+|-|\\*|\\/|\\(|\\)/.test(value)){\n        if(value === '('){\n          this.setState({isOpen: ++isOpen})\n        } else if ( value === \")\"){\n          this.setState({isOpen: --isOpen})\n        }\n        const name = event.target.name\n        if(!expression[expression.length-1].length){\n          expression[expression.length-1] = name\n        } else {\n          expression.push(name)\n        }\n        expression.push('')\n        this.setState({bool: true})\n      }\n    }\n  }\n\n  handleIsEqual = () => {\n    const display = !this.state.isEqual.length ? this.state.result : Number(this.state.integer).toLocaleString('en-US') || 0\n    if(!this.state.isEqual.length){\n      this.state.isEqual.push('')\n    }\n    \n    return display\n  }\n  \n  render() {\n      return (\n      <div className=\"App\">\n        <main className=\"calculator\">\n          <section className=\"display\">\n          <div className=\"integer\">\n            {this.handleIsEqual()}\n          </div>\n          <span className=\"expression\">\n            {this.state.expression}\n          </span>\n          <span className=\"result\">\n            =\n            {this.state.result}\n          </span>\n        </section>\n          <section className=\"numpad\">\n            <Numpad click={this.onButtonClick}/>\n          </section>\n        </main>    \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}