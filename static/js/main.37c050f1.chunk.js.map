{"version":3,"sources":["components/Digits.js","components/Operators.js","components/Numpad.js","components/findParen.js","components/reduceStr.js","components/parens.js","components/exponents.js","components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["digits","split","map","el","className","value","Operators","i","name","test","Numpad","onClick","this","props","click","Component","findParen","expression","start","openParen","closeParen","step","index","length","reduceStr","join","match","opIndex","indexOf","op","ans","Number","splice","console","log","parens","includes","open","lastIndexOf","close","range","slice","exponents","first","second","Result","isOpenParen","startReplace","firstNumStart","firstNumEnd","secondNumStart","endReplace","secondNumEnd","toLocaleString","calculate","App","onButtonClick","event","target","state","userInput","expressionArr","expressionArrSlice","isNaN","setState","preview","result","display","isParenWithX","arr","resultArr","expressionArrSliceOne","show","showResultOrUserInput","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37c050f1.chunk.js","sourcesContent":["export default function digits() {\n    const numbers = '7894561230.'\n    const arr = numbers.split('').map(el => <button className={'num'+el} key={el} value={el}>{el}</button>)\n    return arr\n}","export default function Operators() {\n    const operators = '→C()+-/*^'\n    const arr = operators.split('').map((el, i) => <button className={\"oper-\"+i} key={i} value={el} name={(/\\//.test(el) && \"÷\")|| \n    (/\\*/.test(el) && \"×\")|| el}>{(/\\//.test(el) && \"÷\")|| \n    (/\\*/.test(el) && \"×\")|| el}</button>)\n    return arr\n}","import { Component } from 'react'\nimport './Numpad.css'\nimport Digits from './Digits'\nimport Operators from './Operators'\n\n\nexport default class Numpad extends Component {\n     \n    render(){\n        return (\n            <div className=\"numbers-operators\">\n                <section className='numbers' onClick={this.props.click}>\n                   <Digits/> \n                </section>\n                <section className=\"operators\" onClick={this.props.click}>\n                   <Operators/> \n                </section>\n                <section className=\"ac\" onClick={this.props.click}>\n                    <button value=\"AC\" className=\"clear\">AC</button>\n                    <button className=\"negative\" value=\"±\">±</button>\n                    <button value='=' className='equal'>=</button> \n                </section>\n                \n            </div>\n        )\n    }\n}\n","const findParen=(expression, start)=>{\n    start = start + 1\n    let openParen = 1\n    let closeParen = 0\n    let step = 1\n    if(expression[start-1] === ')'){\n        start = start - 2\n        closeParen = 1\n        openParen = 0\n        step = -1\n    }\n    let index = start\n    for(let i = start; i <expression.length; i=i+step){\n        if(expression[i] === '('){\n            openParen= ++openParen\n        } else if (expression[i] === ')'){\n            closeParen = ++closeParen\n        }\n        const complete = openParen - closeParen === 0\n        if(complete){\n            index = i\n            break\n        }\n    }\n\n    return index\n}\n\nexport default findParen","\n\nfunction reduceStr(expression){\n    while(expression.join('').match(/[×÷]/)){\n        const opIndex = expression.indexOf('×') === -1 ? expression.indexOf('÷') : expression.indexOf('×')\n        const op = expression[opIndex]\n        if(op === '÷'){\n            const ans = Number(expression[opIndex-1]) / Number(expression[opIndex+1])\n            expression.splice(opIndex-1, 3, ans)\n        } else if(op === '×'){\n            const ans = Number(expression[opIndex-1]) * Number(expression[opIndex+1])\n            expression.splice(opIndex-1, 3, ans)\n        }\n    }\n    \n    while(expression.join('').match(/\\+|-/)){\n        if(expression.length === 1 && Number(expression[0])) return expression[0]\n        console.log(\"subtracting \"+ expression)\n        const opIndex = expression.indexOf('+') === -1 ? expression.indexOf('-') : expression.indexOf('+')\n        const op = expression[opIndex]\n        if(op === '-'){\n            const ans = Number(expression[opIndex-1]) - Number(expression[opIndex+1])\n            expression.splice(opIndex-1, 3, ans)\n        } else if(op === '+'){\n            const ans = Number(expression[opIndex-1]) + Number(expression[opIndex+1])\n            expression.splice(opIndex-1, 3, ans)\n        }\n    }\n\n    return expression[0]\n}\n\nexport default reduceStr","import reduceStr from './reduceStr'\n\nfunction parens(expression){\n    while(expression.includes('(')){\n        const open = expression.lastIndexOf('(')\n        const close = expression.indexOf(')', open)\n        const range = close - open\n        expression.splice(open, range+1, reduceStr(expression.slice(open+1, close)))\n    }\n    return expression\n}\n\nexport default parens","import parens from './parens'\nimport reduceStr from './reduceStr'\n\nfunction exponents(first, second){\n    while(second.includes('(')){\n        second = parens(second)\n    } \n    while(first.includes('(')){\n        first = parens(first)\n    } \n    if (second.join('').match(/[+-×÷]/)){\n        second = reduceStr(second)\n    }\n    if (first.join('').match(/[+-×÷]/)){\n        first = reduceStr(first)\n    }\n    return Number(first)**Number(second)\n}\n\nexport default exponents","import {Component} from 'react'\nimport '../App.css';\nimport findParen from './findParen'\nimport exponents from './exponents'\nimport parens from './parens'\nimport reduceStr from './reduceStr'\n\nexport default class Result extends Component {\n\n    calculate(expression, isOpenParen){\n        if(isOpenParen !== 0) return 0\n        while(expression.includes('^')){\n            const opIndex = expression.indexOf('^')\n            let startReplace = opIndex -1\n            let firstNumStart = startReplace\n            let firstNumEnd = opIndex\n            if(expression[startReplace] === ')'){\n                startReplace = findParen(expression, startReplace)\n                firstNumStart = startReplace + 1\n                firstNumEnd = opIndex - 1\n            }\n            let secondNumStart = opIndex + 1\n            let endReplace = opIndex + 1\n            let secondNumEnd = opIndex + 2\n            if(expression[endReplace] === '('){\n                endReplace = findParen(expression, endReplace)\n                secondNumStart = opIndex + 2\n                secondNumEnd = endReplace\n            }\n            // const range = endReplace - startReplace\n            expression.splice(startReplace, endReplace+1, exponents(expression.slice(firstNumStart, firstNumEnd), expression.slice(secondNumStart, secondNumEnd)))\n        }\n        \n        parens(expression)\n    \n        reduceStr(expression)\n    \n        return Number(expression[0]).toLocaleString()\n    \n    }\n\n    render() {\n        const {expression, isOpenParen} = this.props\n        return this.calculate(expression, isOpenParen)\n    }\n}","import { Component } from 'react';\nimport './App.css';\nimport Numpad from './components/Numpad';\nimport Result from './components/Result'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      userInput: '',\n      expressionArr: [],\n      preview: null,\n\n      result: 0,\n      isOpenParen: 0,\n    }\n  }\n  onButtonClick = (event) => {\n    const {name, value} = event.target\n    const {userInput, expressionArr} = this.state\n    let { isOpenParen } = this.state\n    const isNumber = !!Number(value)\n    if(isNumber || value === '.' || value === '0'){\n      let expressionArrSlice = expressionArr.slice(0, expressionArr.length-1)\n      if(isNaN(Number(expressionArr[expressionArr.length-1]))){\n        expressionArrSlice = expressionArr.slice(0, expressionArr.length)\n      }\n      this.setState({userInput: userInput + value, preview: [...expressionArrSlice, userInput + value], expressionArr: [...expressionArrSlice, userInput + value], result: <Result expression={[...expressionArrSlice, userInput + value]} isOpenParen={isOpenParen}/>})\n    }else {\n      switch(value){\n        case 'AC':\n          this.setState({\n            userInput: '',\n            expressionArr: [],\n            display: 0,\n            preview: null,\n            result: 0,\n            isOpenParen: 0\n          })\n        break;\n        case 'C':\n          this.setState({userInput: '', preview: expressionArr})\n        break;\n        case '±':\n          this.setState({userInput: -1*(Number(userInput)), preview: expressionArr.slice(0, expressionArr.length-1).join('') + -1*(Number(userInput)), expressionArr: [...expressionArr.slice(0, expressionArr.length-1), \"\" + -1*(Number(userInput))]})\n        break;\n        case '=':\n          const ans = <Result expression={expressionArr} isOpenParen={isOpenParen}/>\n          this.setState({result: ans, userInput: ''})\n          break;\n        case '(':\n          const isParenWithX = Number(expressionArr[expressionArr.length-1]) ? ['×', '('] : ['(']\n          this.setState({isOpenParen: ++isOpenParen, expressionArr: [...expressionArr, ...isParenWithX], preview: [...expressionArr, ...isParenWithX], userInput: ''})\n          break;\n        case ')':\n          this.setState({isOpenParen: --isOpenParen, expressionArr: [...expressionArr, value],preview: [...expressionArr, value], result: <Result expression={[...expressionArr, value]} isOpenParen={isOpenParen}/>})\n        break;\n        case '→':\n          let arr = expressionArr.slice(0, expressionArr.length-1)\n          if(expressionArr[expressionArr.length-1] === ')'){\n            this.setState({isOpenParen: ++isOpenParen})\n          } else if(expressionArr[expressionArr.length-1] === '('){\n            this.setState({isOpenParen: --isOpenParen})\n          }\n          if(expressionArr[expressionArr.length-1] === ''){\n            expressionArr.slice(0, expressionArr.length-2)\n            if(expressionArr[expressionArr.length-2] === ')'){\n              this.setState({isOpenParen: ++isOpenParen})\n            } else if(expressionArr[expressionArr.length-2] === '('){\n              this.setState({isOpenParen: --isOpenParen})\n            }\n          } \n            let resultArr = arr.slice(0, arr.length)\n          if(isNaN(Number(arr[arr.length-1]))){\n            resultArr = arr.slice(0, arr.length-1)\n          }\n\n          !!expressionArr.length &&\n          this.setState({expressionArr: arr, preview: arr, userInput: '', display: 0, result: <Result expression={resultArr} isOpenParen={isOpenParen}/>})\n        break;\n        case '^':\n          let expressionArrSlice = expressionArr.slice(0, expressionArr.length)\n      if(isNaN(Number(expressionArr[expressionArr.length-1])) && expressionArrSlice[expressionArrSlice.length-1] !== ')'){\n        expressionArrSlice = expressionArr.slice(0, expressionArr.length-1)\n      }\n          this.setState({expressionArr: [...expressionArrSlice, name, '('], userInput: '', preview: [...expressionArrSlice, name, '('], isOpenParen: ++isOpenParen})\n        break;\n        default:\n          let expressionArrSliceOne = expressionArr.slice(0, expressionArr.length)\n          if(isNaN(Number(expressionArr[expressionArr.length-1])) && expressionArrSliceOne[expressionArrSliceOne.length-1] !== ')'){\n          expressionArrSliceOne = expressionArr.slice(0, expressionArr.length-1)\n        }\n        if(!!expressionArr.length && !expressionArr[expressionArr.length-1].match(/[(]/)){\n          this.setState({expressionArr: [...expressionArrSliceOne, name], userInput: '', preview: [...expressionArrSliceOne, name]})\n        }\n          \n      }\n    }\n   \n  }\n\n  \n  render() {\n    const {preview, result, userInput} = this.state\n    // console.log(this.state.userInput)\n    function showResultOrUserInput(){\n      let show = 0\n      if(!userInput.length){\n        show = 0\n        console.log(show)\n      }else{\n        show = userInput\n      }\n      return show\n    }\n    const display = showResultOrUserInput()\n      return (\n      <div className=\"App\">\n        <main className=\"calculator\">\n          <section className=\"display\">\n          <div className=\"integer\">\n            {display}\n          </div>\n          <span className=\"expression\">\n            {preview}\n          </span>\n          =\n          <span className=\"result\">\n            {result}\n          </span>\n        </section>\n          <section className=\"numpad\">\n            <Numpad click={this.onButtonClick}/>\n          </section>\n        </main>    \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}